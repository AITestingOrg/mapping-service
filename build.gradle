buildscript {
    ext {
        springBootVersion = '2.0.1.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "jacoco"
apply plugin: 'checkstyle'

group = 'org.aist.aide'
version = '0.0.1'
sourceCompatibility = 10

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/milestone" }
}


ext {
    springCloudVersion = 'Finchley.RC1'
}

dependencies {
    compile files('./libs/form-expert-common-1.1.jar')
    compile 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    compile "org.springframework.boot:spring-boot-starter-validation:${springBootVersion}"
    compile('org.springframework.boot:spring-boot-starter-data-mongodb')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.cloud:spring-cloud-starter-netflix-hystrix')
    compile('javax.validation:validation-api')

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.boot:spring-boot-test')
    testCompile('org.springframework.cloud:spring-cloud-starter-contract-verifier')
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

checkstyle {
    toolVersion = "8.7"
    configFile = new File(rootDir, "checkstyle.xml")
    maxWarnings = 0
    maxErrors = 0
}

checkstyleMain {
    source = fileTree('src/main') {
        excludes = ['*.yml']
    }
}
checkstyleTest {
    source = fileTree('src/test') {
        excludes = ['*.yml']
    }
}

jacoco {
    toolVersion = "0.8.1"
}

jacocoTestReport {
    reports {
        html.destination file("${buildDir}/jacocoHtml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.85
            }
        }
    }
}
test.finalizedBy(jacocoTestCoverageVerification)
